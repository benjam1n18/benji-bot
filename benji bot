using Discord;
using Discord.Commands;
using Discord.WebSocket;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Reflection;
using System.Threading.Tasks;

namespace benji_bot
{
    class Program
    {
        static void Main(string[] args) => new Program().RunBotAsync().GetAwaiter().GetResult();
        


   
        private DiscordSocketClient _client;
        private CommandService _commands;
        private IServiceProvider _services;
        public async Task RunBotAsync()
        {
            _client = new DiscordSocketClient();
            _commands = new CommandService();

            _services = new ServiceCollection()
            .AddSingleton(_client)
            .AddSingleton(_commands)
            .BuildServiceProvider();

            string botToken = "NjM2NTMwNDU3OTk5MzEwODQ5.XbLv6A.XPEsoU0cGLBNd16aNc2NYw7Qx6Q";
            ///event sub
            _client.Log += Log;
            _client.UserJoined += AnnouceUserjoined;

            await RegisterCommandsAsync();

            await _client.LoginAsync(TokenType.Bot, botToken);
            await _client.StartAsync();
            await Task.Delay(-1);
        }

        private async Task AnnouceUserjoined(SocketGuildUser user)
        {
            var guild = user.Guild;
            var channel = guild.DefaultChannel;
            await channel.SendMessageAsync($"welcome, {user.Mention}");
        }

        private Task Log(LogMessage arg)
        {
            Console.WriteLine(arg);
            return Task.CompletedTask;
        }

        public async Task RegisterCommandsAsync() 

        {

            _client.MessageReceived += HandleCommandsAsync;



           await _commands.AddModulesAsync(Assembly.GetEntryAssembly(),
               services:null);


           
        }

        private async Task HandleCommandsAsync(SocketMessage arg)
        {
            var message = arg as SocketUserMessage;

            if (message is null || message.Author.IsBot) return;

            int argpos = 0;
            if (message.HasStringPrefix("}", ref argpos)|| message.HasMentionPrefix(_client.CurrentUser, ref argpos))
            {
                var context = new SocketCommandContext(_client, message);

                var result =  await _commands.ExecuteAsync(context, argpos, _services);
                if (!result.IsSuccess)
                    Console.WriteLine(result.ErrorReason);

            }
        }

        }
    }

